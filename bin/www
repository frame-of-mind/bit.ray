#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bit.ray:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket io (server).
 */

var io = require('socket.io')(server);
var nsp = io.of('/rooms');

var socketInfo = {};

nsp.on('connection', function (socket) {
    console.log("Connected to rooms");
    addToSocketList(socket);

    // Send *msg* to *id*
    socket.on('say to someone', function(id, msg){
        socket.broadcast.to(id).emit('my message', `${socket.id}: ${msg}`);
    });
});


/**
 * Socket on connection.
 * #############################
 * #### Server side actions ####
 * #############################
 */
io.sockets.on('connection', function(socket) {
    // Save the socket
    // addToSocketList(socket);

    // Remove the socket
    socket.on('disconnect', function(username) {
        // io.emit('is_online', 'ðŸ”´ <i>' + username + ' left the chat..</i>');
        removeFromSocketList(socket);
    });

    /** ################## */
    /** #### ACTIONS #### */
    /** ################ */
    socket.on('username', function(username) {
      socket.username = username;
      io.emit('is_online', 'ðŸ”µ <i>' + socket.username + ' join the chat..</i>');
    });

    socket.on('chat_message', function(message) {
      io.emit('chat_message', '<strong>' + socket.username + '</strong>: ' + message);
    });

});

function addToSocketList(socket) {
    socketInfo[socket.id] = [];
    socketInfo[socket.id].socket = socket; // Socket
    socketInfo[socket.id].data= {}; // socket related data
    console.log(`Added ${socket.id}`);
    console.log(`Number of online betrayers: ${Object.keys(socketInfo).length}`);
}

function removeFromSocketList(socket) {
    delete socketInfo[socket.id];
    console.log(`Removed ${socket.id}`);
    console.log(`Number of online betrayers: ${Object.keys(socketInfo).length}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
