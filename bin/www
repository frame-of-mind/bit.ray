#!/usr/bin/env node

/** Module dependencies.*/
const app = require('../server');
const debug = require('debug')('bit.ray:server');
const http = require('http');

const models = require('../common/models');

/** Get port from environment and store in Express.*/
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/** Create HTTP server.*/
const server = http.createServer(app);

/** Listen on provided port, on all network interfaces.*/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/** Create Socket io (server).*/
const io = require('socket.io')(server);

/** List of sockets*/
const socketInfo = {};

/** Connect to server*/
io.sockets.on('connection', function(socket) {

    // Registra l'UID e collegalo al socket
    socket.on('register', function (UID) {
        console.log(`[[ ${socket.id} ]] send UID [[ ${UID} ]]`);

        addToSocketList(UID, socket);
        //there was something in localstorage
        // if (game.Players.existsUID(data)) {
        //     player = game.Players.getByUID(data);
        //     player.disconnected = false;
        // } else {
        //     //timed out, create new player
        // }

    });

    io.emit('connected_socket', socketInfo);
    // Remove the socket
    socket.on('disconnect', function() {
        // io.emit('is_online', 'ðŸ”´ <i>' + username + ' left the chat..</i>');
        // removeFromSocketList(socket);
        console.log(`socket ${socket.id} disconnected`)
    });

    socket.on('say_to_someone', function(body){
        let from = body.from; // == UID
        let to = body.to;
        let text = body.text;
        let type = body.type;

        // Dallo UID recupero il socket id
        let toSocketId = socketInfo[to].socket.id;

        console.log(`[[ ${from} ]] > [[ ${to} ]]: "${text}"`);
        socket.broadcast.to(toSocketId).emit('my_message', body);
    });

    /** Socket actions*/
    socket.on('username', function(username) {
        socket.username = username;
        io.emit('is_online', 'ðŸ”µ <i>' + socket.username + ' join the chat..</i>');
    });

});

/** Add socket to SocketList*/
function addToSocketList(UID, socket) {
    socketInfo[UID] = [];
    socketInfo[UID].socket = socket; // Socket
    socketInfo[UID].data= {}; // socket related data
    console.log(`Added ${UID}`);
    console.log(`Number of online betrayers: ${Object.keys(socketInfo).length}`);
}

/** Remove socket from SocketList*/
function removeFromSocketList(socket) {
    delete socketInfo[socket.id];
    console.log(`Removed ${socket.id}`);
    console.log(`Number of online betrayers: ${Object.keys(socketInfo).length}`);
}


/** Normalize a port into a number, string, or false.*/
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/** Event listener for HTTP server "error" event.*/
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/** Event listener for HTTP server "listening" event.*/
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
